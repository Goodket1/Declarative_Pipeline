pipeline{
   agent  {
    node {
     label 'CI_env'
     customWorkspace '/var/jenkins'
    }
   }
 tools {
   gradle 'g4'
    }
    environment {
      def workspace = pwd()
      def tomcat_path = '/opt/tomcat/webapps/ROOT/'

      // Repository on Artifactory
      stagerepo ='rc_gradle'
      devrepo = 'dev'

      // Servers
      dev_server = '/var/else/'
      rc_server = '/var/rc/'
      prod_server = '/var/version/'
      http_dev_server = "http://35.194.45.43:8092/"
      http_stage_server = 'http://35.194.45.43:8090/'
      http_prod_server = 'http://35.194.45.43:8091'
      artifactory_server = 'https://artifactory.legsup.co.uk/artifactory/'
    }
 stages{
    stage('checkout SCM'){
        steps {
            checkout scm
            script {
              if ( env.BRANCH_NAME == 'rc'){
                  env.http_server = "${http_stage_server}${env.BUILD_NUMBER}"
                  env.sshserver = "${rc_server}"
                  env.reponame = "${stagerepo}"
                  tomcat_path = "${tomcat_path}/${BRANCH_NAME}${env.BUILD_NUMBER}"
              }else {
                  env.http_server = "${http_dev_server}${env.BUILD_NUMBER}"
                  env.sshserver = "${dev_server}"
                  env.reponame = "${devrepo}"
                  tomcat_path = "${tomcat_path}${BRANCH_NAME}${env.BUILD_NUMBER}"
                  }
            }
        }
    }
    stage('SonarQube analysis') {
       when { not { branch 'master'}}
       steps {
         sh "echo OK"
       }
    }

    stage (' Build '){
      steps{
        script {
           if (env.BRANCH_NAME == 'rc' ){
                def server = Artifactory.server 'artifactory'
                def rtGradle = Artifactory.newGradleBuild()
                rtGradle.tool = 'g4'
                rtGradle.deployer repo: reponame, server: server
                rtGradle.deployer.deployArtifacts = false
                buildInfo  = Artifactory.newBuildInfo()
                rtGradle.run rootDir: "/var/jenkins/gradle_app", buildFile: 'build.gradle', tasks: 'clean test'

                buildInfo = Artifactory.newBuildInfo()
                rtGradle.run rootDir: '/var/jenkins/gradle_app', buildFile: 'build.gradle', tasks: 'artifactoryPublish', buildInfo: buildInfo
                rtGradle.deployer.deployArtifacts buildInfo
                server.publishBuildInfo buildInfo
           }
           else {
                def server = Artifactory.server 'artifactory'
                def rtGradle = Artifactory.newGradleBuild()
                rtGradle.tool = 'g4'
                rtGradle.deployer repo: reponame, server: server
                rtGradle.deployer.deployArtifacts = false
                buildInfo  = Artifactory.newBuildInfo()
                rtGradle.run rootDir: "/var/jenkins/gradle_app", buildFile: 'build.gradle', tasks: 'clean build'

          }
          }
        }
      }
    stage ('Deploy to Server'){
      steps{
         script {
            if (env.BRANCH_NAME == 'rc' ){
              withCredentials([string(credentialsId: 'my-pass', variable: 'password')]) {
                sh """
                  mkdir ${rc_server}${env.BUILD_NUMBER} && \
                  curl -u admin:${password} -O ${artifactory_server}${reponame}/gradle_app/unspecified/gs-gradle-unspecified.jar && \
                  unzip /var/jenkins/gradle_app/build/libs/gs-gradle-0.1.0.jar -d ${rc_server}${env.BUILD_NUMBER}
                """
               }
              }
              else {
                sh """
                mkdir ${dev_server}${env.BUILD_NUMBER} && \
                unzip /var/jenkins/gradle_app/build/libs/gs-gradle-0.1.0.jar -d ${dev_server}${env.BUILD_NUMBER}/
              """
              }
            }
         }
      }
    }
 }


