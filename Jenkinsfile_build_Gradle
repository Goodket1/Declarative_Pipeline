pipeline{
   agent  {
    node {
     label 'CI_env'
     customWorkspace "/var/jenkins/${env.BUILD_NUMBER}"
    }
   }
 tools {
   gradle 'g4'
    }
    environment {
      def workspace = pwd()
      def tomcat_path = '/opt/tomcat/webapps/ROOT/'

      // Repository on Artifactory
      stagerepo ='rc_gradle'
      devrepo = 'dev'
      def version = sh returnStdout: true, script:  "cat ${workspace}/gradle_app/build.gradle | grep version | cut -d\"'\" -f2 | cut -d\"'\" -f1"

      // Servers
      dev_server = '/var/else/'
      rc_server = '/var/rc/'
      prod_server = '/var/version/'
      http_dev_server = "http://35.194.45.43:8092/"
      http_stage_server = 'http://35.194.45.43:8090/'
      http_prod_server = 'http://35.194.45.43:8091'
      artifactory_server = 'https://artifactory.legsup.co.uk/artifactory/'
    }

 stages{
    stage('checkout SCM'){
        steps {
            checkout scm
            script {
              if ( env.BRANCH_NAME == 'rc'){
                  env.http_server = "${http_stage_server}${env.BUILD_NUMBER}"
                  env.sshserver = "${rc_server}"
                  env.reponame = "${stagerepo}"
                  tomcat_path = "${tomcat_path}/${BRANCH_NAME}${env.BUILD_NUMBER}"
              }else {
                  env.http_server = "${http_dev_server}${env.BUILD_NUMBER}1"
                  env.sshserver = "${dev_server}"
                  env.reponame = "${devrepo}"
                  tomcat_path = "${tomcat_path}${BRANCH_NAME}${env.BUILD_NUMBER}"
                  }
            }
        }
    }

    stage('SonarQube analysis') {
       when { not { branch 'master'}}
       steps {
         sh "echo OK"
       }
    }

    stage (' Build '){
      steps{
       dir ("${workspace}") {
        script {
           if (env.BRANCH_NAME == 'rc' ){
                def server = Artifactory.server 'artifactory'
                def rtGradle = Artifactory.newGradleBuild()
                rtGradle.tool = 'g4'
                rtGradle.deployer repo: reponame, server: server
                rtGradle.deployer.deployArtifacts = false
                buildInfo = Artifactory.newBuildInfo()
                rtGradle.run rootDir: 'gradle_app', buildFile: 'build.gradle', tasks: 'artifactoryPublish', buildInfo: buildInfo
                rtGradle.deployer.deployArtifacts buildInfo
                server.publishBuildInfo buildInfo
           }
           else {
                def server = Artifactory.server 'artifactory'
                def rtGradle = Artifactory.newGradleBuild()
                rtGradle.tool = 'g4'
                rtGradle.deployer repo: reponame, server: server
                rtGradle.deployer.deployArtifacts = false
                buildInfo  = Artifactory.newBuildInfo()
                rtGradle.run rootDir: "gradle_app", buildFile: 'build.gradle', tasks: 'clean build'
           }
          }
          }
        }
      }

    stage ('Test artifact'){
      steps{
       dir ("${workspace}") {
         script {
            if (env.BRANCH_NAME == 'rc' ){
              version = "${version}".trim()
              withCredentials([string(credentialsId: 'my-pass', variable: 'password')]) {
                sh """
                  mkdir ${rc_server}${env.BUILD_NUMBER} && \
                  curl -u admin:${password} -O ${artifactory_server}${reponame}/com/efsavage/web_app/${version}/web_app-${version}.war && \
                  unzip web_app-${version}.war -d ${rc_server}${env.BUILD_NUMBER}
                """
                def response = httpRequest http_server
                println("Status: "+response.status)
               }
              }
              else {
                version = "${version}".trim()+".war"
                sh """
                  mkdir ${dev_server}${env.BUILD_NUMBER} && \
                  cp  ${workspace}/gradle_app/build/libs/web_app-${version}  ./web_app-${version}
                  unzip web_app-${version} -d ${dev_server}${env.BUILD_NUMBER}
                """
                def response = httpRequest http_server
                println("Status: "+response.status)
              }
            }
         }
      }
      }
    stage ('Deploy to Version (only rc)'){
      when { branch 'rc' }
        steps{
           script {
                 input "Move to version ?"
                 def server = Artifactory.server 'artifactory'
                 def rtGradle = Artifactory.newGradleBuild()
                 rtGradle.deployer repo: reponame, server: server
                 rtGradle.tool = 'g4'
                 rtGradle.run rootDir: "/var/jenkins/gradle_app", buildFile: 'build.gradle', tasks: 'clean'
                 def promotionConfig = [
                    'buildName'          : buildInfo.name,
                    'buildNumber'        : buildInfo.number,
                    'targetRepo'         : 'version_gradle',
                    'comment'            : 'this is the promotion comment',
                    'sourceRepo'         : stagerepo,
//                    'includeDependencies': true,
                    'copy'               : true
                 ]
                 server.promote promotionConfig
              }
         }
      }
    }
 post {
   success {
     echo "Show result on ${http_server}"
     slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) ${http_server}")
     }
   failure {
      slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
 }

}

