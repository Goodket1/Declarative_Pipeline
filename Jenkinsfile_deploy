pipeline{
 agent {
    node {
        label 'CI_env'
        customWorkspace '/var/jenkins'
    }
 }
 options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
        timeout(time: 1, unit: 'HOURS')
    }

 environment {
   def workspace = pwd()
   // Servers
   localrepo = '/root/.m2/repository/'
   def http_server = "http://${ip}:8080"
   def image = "artifactory.legsup.co.uk:8082/web_app:${version}"
   registry = 'artifactory.legsup.co.uk:8082'
   pomversion = readMavenPom(file:'app/pom.xml').getVersion()
   pomid = readMavenPom(file:'app/pom.xml').getArtifactId()
 }

 stages{
    stage('checkout SCM'){
        steps {
            checkout scm
        }
    }
    stage ('Deploy to QA Server'){
      steps{
        script {
          img = docker.image("${image}").withRun('-p 8081:8080') { c ->
          def ip = sh returnStdout: true, script: "docker inspect -f {{.NetworkSettings.IPAddress}} ${c.id}"
          def http_server = "http://${ip}".trim()+":8080"
          sh "sleep 3"
          def response = httpRequest http_server
          println("Status: "+response.status)
          input "Is build is success ?"
          }
        }
      }
    }
    stage ('Set tag version and push to artifactory'){
      steps{
        script {
          def newtag = sh returnStdout: true, script: 'echo "${version%_*}"'
          sh """
            docker tag artifactory.legsup.co.uk:8082/web_app:${version} artifactory.legsup.co.uk:8082/web_app:v${newtag}
            docker push artifactory.legsup.co.uk:8082/web_app:v${newtag}
            """
          }
        }
      }
    }
  post {
   success {
     echo "Show result on ${http_server}"
     slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) ${http_server}")
     }
   failure {
      slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
 }
}
 }