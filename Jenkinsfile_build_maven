pipeline{
   agent  {
    node {
     label 'CI_env'
     customWorkspace '/var/jenkins'
    }
   }

 tools {
   maven 'm3'
    }
    environment {
      def server = Artifactory.server 'artifactory'
      buildInfo = Artifactory.newBuildInfo()
      def workspace = pwd()
      def tomcat_path = '/opt/tomcat/webapps/ROOT/'

      // Repository on Artifactory
      stagerepo ='rc'
      devrepo = 'dev'

      // Servers
      dev_server = '/var/else/'
      rc_server = '/var/rc/'
      prod_server = '/var/version/'
      http_dev_server = "http://35.194.45.43:8092/"
      http_stage_server = 'http://35.194.45.43:8090/'
      http_prod_server = 'http://35.194.45.43:8091'
      artifactory_server = 'https://artifactory.legsup.co.uk/artifactory/'

    }
 stages{
    stage('checkout SCM'){
        steps {
            checkout scm
            script {
              if ( env.BRANCH_NAME == 'rc'){
                  env.http_server = "${http_stage_server}${env.BUILD_NUMBER}"
                  env.sshserver = "${rc_server}"
                  env.reponame = "${stagerepo}"
                  tomcat_path = "${tomcat_path}/${BRANCH_NAME}${env.BUILD_NUMBER}"
              }else {
                  env.http_server = "${http_dev_server}${env.BUILD_NUMBER}"
                  env.sshserver = "${dev_server}"
                  env.reponame = "${devrepo}"
                  tomcat_path = "${tomcat_path}${BRANCH_NAME}${env.BUILD_NUMBER}"
                  }
            }
        }
    }
   stage ("initialize") {
      steps {
        sh '''
            echo "PATH = ${PATH}"
            echo "M2_HOME = ${M2_HOME}"
            '''
        }
    }

    stage('SonarQube analysis') {
       when { not { branch 'master'}}
       steps {
         sh "echo OK"
       }
    }

    stage (' Build '){
      steps{
       dir( 'app' ) {
        script {
           if (env.BRANCH_NAME == 'rc' ){
                def server = Artifactory.server 'artifactory'
                def rtMaven = Artifactory.newMavenBuild()
                rtMaven.deployer server: server, releaseRepo: reponame, snapshotRepo: reponame
                rtMaven.tool = 'm3'
                def buildInfo = rtMaven.run pom: 'pom.xml', goals: 'install'
                buildInfo.env.capture = true
                server.publishBuildInfo buildInfo
                def pom = readMavenPom file: 'pom.xml'
                id = pom.artifactId
                version = pom.version
           }
           else {
                sh 'mvn clean verify'
                def pom = readMavenPom file: 'pom.xml'
                id = pom.artifactId
                version = pom.version
          }
          }
        }
      }
    }
    stage ('Deploy to Server'){
      steps{
       dir( '/var/' ) {
         script {
            if (env.BRANCH_NAME == 'rc' ){
              withCredentials([string(credentialsId: 'my-pass', variable: 'password')]) {
                sh """
                  mkdir ${rc_server}${env.BUILD_NUMBER} && \
                  curl -u admin:${password} -O ${artifactory_server}${reponame}/com/efsavage/${id}/${version}/${id}-${version}.war && \
                  unzip ${id}-${version}.war -d ${rc_server}${env.BUILD_NUMBER}
                """
               }
              }
              else {
                sh """
                mkdir ${dev_server}${env.BUILD_NUMBER} && \
                unzip /var/jenkins/app/target/${id}-${version}.war -d ${dev_server}${env.BUILD_NUMBER}/
              """
              }
            }
         }
      }
    }
    stage ('Test URL '){
      steps{
         script {
               if (env.BRANCH_NAME == 'rc' ){
                 def response = httpRequest env.http_server
                 println("Status: "+response.status)
                 input 'Is build succeed?'
                 def server = Artifactory.server 'artifactory'
                 def rtMaven = Artifactory.newMavenBuild()
                 rtMaven.deployer server: server, releaseRepo: reponame, snapshotRepo: reponame
                 rtMaven.tool = 'm3'
                 def buildInfo = rtMaven.run pom: 'app/pom.xml', goals: 'clean'
                 def promotionConfig = [
                    'buildName'          : buildInfo.name,
                    'buildNumber'        : buildInfo.number,
                    'targetRepo'         : 'version',
                    'comment'            : 'this is the promotion comment',
                    'sourceRepo'         : 'rc',
                    'status'             : 'Released',
                    'includeDependencies': true,
                    'copy'               : true
                 ]
                 server.promote promotionConfig
              }
              else {
                 def response = httpRequest env.http_server
                 println("Status: "+response.status)
              }
         }
      }
    }
 }
 post {
   success {
     echo "Show result on ${http_server}"
     slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) ${http_server}")
     }
   failure {
      slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
 }
}
}

