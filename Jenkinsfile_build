pipeline{
   agent  {
    node {
     label 'CI_env'
     customWorkspace '/var/jenkins'
    }
   }

   tools {
     maven 'm3'
   }

   options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
        timeout(time: 1, unit: 'HOURS')
   }

   environment {
      def workspace = pwd()
      http_server = "http://${slave}:8080/${env.BUILD_NUMBER}"
      registry = 'artifactory.legsup.co.uk:8082'
      localrepo = '/root/.m2/repository'
      pomversion = readMavenPom(file:'app/pom.xml').getVersion()
      pomid = readMavenPom(file:'app/pom.xml').getArtifactId()
   }
 stages{
    stage('checkout SCM'){
        steps {
            checkout scm
        }
    }

    stage ("initialize") {
      steps {
        sh '''
            echo "PATH = ${PATH}"
            echo "M2_HOME = ${M2_HOME}"
           '''
        }
    }

    stage('SonarQube analysis') {
       steps {
         sh "echo SonarQube analysis OK"
       }
    }

    stage (' Build '){
      steps{
       dir( 'app' ) {
                sh 'mvn clean install'
       }
    }
   }

   stage ('Build Docker image and do smoke test'){
    steps{
      script{
         sh "cp ${localrepo}/com/efsavage/${pomid}/${pomversion}/${pomid}-${pomversion}.war ./ROOT.war"
         image = docker.build("${registry}/${pomid}:${pomversion}_rc")
         port = sh (
               script: 'awk -v min=8082 -v max=8099 \'BEGIN{srand(); print int(min+rand()*(max-min+1))}\'',
             returnStdout: true
          ).trim()
         echo port

          img = docker.image("${registry}/${pomid}:${pomversion}_rc").withRun("-p ${port}:8080") { c ->
          def http_server = "http://127.0.0.1:${port}"
          sh "sleep 8"
          def response = httpRequest http_server
          println("Status: "+response.status)
          }
      }
    }
  }

   stage ('Push to registry'){
    steps{
      script{
         withDockerRegistry([credentialsId: 'artifactory', url: "https://${registry}"]) {
         image.push()
         }
      }
    }
 }
 }
 post {
   success {
     echo "Show result on ${http_server}"
     slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}) ${http_server}")
     }
   failure {
      slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
 }
}
}
